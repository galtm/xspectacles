<?xml version="1.0" encoding="UTF-8"?>
<x:description stylesheet="dot-versus-result-text.xsl"
    xslt-version="3.0"
    xmlns:x="http://www.jenitennison.com/xslt/xspec"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns:xv="urn:x-xspectacles:xspec:variables">

    <!--
        Sample code for "Ways to Access XSLT Result in XSpec Testing"
        https://medium.com/@xspectacles/ways-to-access-xslt-result-in-xspec-testing-fd3aa22184e0
    -->

    <x:scenario label="Template produces multiple text nodes">
        <x:context mode="multiple-text-nodes">
            <ul>
                <li>An item</li>
                <li>Another item</li>
            </ul>
        </x:context>
        <x:expect label=". is a document node,"
            test=". instance of document-node()"/>
        <x:expect label="containing one child text node."
            test="count(./text())" select="1"/>
        <x:expect label="$x:result is a sequence of five items,"
            test="count($x:result)" select="5"/>
        <x:expect label="all of which are text nodes."
            test="$x:result instance of text()+"/>

        <x:scenario
            label="string($x:result) errors for sequence of multiple strings"
            pending="Skip due to syntax error">
            <!--
                XPTY0004  A sequence of more than one item is not allowed
                as the first argument of fn:string() (text{}, text{*})
            -->
            <x:like label="Check string($x:result)"/>            
        </x:scenario>
        <x:scenario label="Joining the $x:result strings avoids syntax error">
            <x:expect label="String value matches file content"
                test="string-join($x:result,'')"
                select="'expected-output-ul.md'
                => resolve-uri($x:xspec-uri)
                => unparsed-text()
                => replace('&#13;','')"/>
            <x:expect label="Tokenized string value matches string sequence"
                test="string-join($x:result,'') => tokenize('&#10;')"
                select="(
                '',
                '',
                '* An item',
                '* Another item'
                )"/>
        </x:scenario>
        <x:scenario label="string(.) works">
            <x:like label="Check string(.)"/>            
        </x:scenario>
    </x:scenario>

    <x:scenario label="Template produces one text node">
        <x:context mode="one-text-node">
            <ul>
                <li>An item</li>
                <li>Another item</li>
            </ul>
        </x:context>
        <x:expect label=". is a document node,"
            test=". instance of document-node()"/>
        <x:expect label="containing one child text node."
            test="count(./text())" select="1"/>
        <x:expect label="$x:result is one item,"
            test="count($x:result)" select="1"/>
        <x:expect label="which is a text node."
            test="$x:result instance of text()"/>
        <x:scenario label="string($x:result) works">
            <x:like label="Check string($x:result)"/>            
        </x:scenario>
        <x:scenario label="string(.) works">
            <x:like label="Check string(.)"/>            
        </x:scenario>
    </x:scenario>

    <x:scenario label="Template produces one document node">
        <x:context mode="one-document-node">
            <ul>
                <li>An item</li>
                <li>Another item</li>
            </ul>
        </x:context>
        <x:expect label=". is a document node,"
            test=". instance of document-node()"/>
        <x:expect label="containing one child text node."
            test="count(./text())" select="1"/>
        <x:expect label="$x:result is one item,"
            test="count($x:result)" select="1"/>
        <x:expect label="which is a document node."
            test="$x:result instance of document-node()"/>
        <x:scenario label="string($x:result) works">
            <x:like label="Check string($x:result)"/>            
        </x:scenario>
        <x:scenario label="string(.) works">
            <x:like label="Check string(.)"/>            
        </x:scenario>
    </x:scenario>

    <!-- Shared templates -->
    <x:scenario shared="yes" label="Check string($x:result)">
        <x:expect label="String value matches file content"
            test="string($x:result)"
            select="'expected-output-ul.md'
            => resolve-uri($x:xspec-uri)
            => unparsed-text()
            => replace('&#13;','')"/>
        <x:expect label="Tokenized string value matches string sequence"
            test="string($x:result) => tokenize('&#10;')"
            select="(
            '',
            '',
            '* An item',
            '* Another item'
            )"/>
    </x:scenario>
    <x:scenario shared="yes" label="Check string(.)">
        <x:expect label="String value matches file content"
            test="string(.)"
            select="'expected-output-ul.md'
            => resolve-uri($x:xspec-uri)
            => unparsed-text()
            => replace('&#13;','')"/>
        <x:expect label="Tokenized string value matches string sequence"
            test="string(.) => tokenize('&#10;')"
            select="(
            '',
            '',
            '* An item',
            '* Another item'
            )"/>
    </x:scenario>
</x:description>

<!-- Copyright Â© 2023 by Amanda Galtman. -->